{
  "tasks": [
    {
      "id": 1,
      "title": "Setup Project Repository and Core Architecture",
      "description": "Initialize the project repository, set up the basic file structure, and integrate the mcp-agent framework as the core multi-agent orchestrator. Establish the foundation for the web UI.",
      "status": "pending",
      "dependencies": [],
      "priority": "high",
      "details": "Create a Git repository. Set up a Python backend (e.g., FastAPI) with mcp-agent library integrated. Define basic agent structure and orchestration flow (FR01). Set up a frontend framework (e.g., React, Vue) shell for the web UI (FR02). Configure basic environment setup (e.g., Docker Compose).",
      "testStrategy": "Verify repository creation. Confirm mcp-agent installation and basic import. Run the initial backend and frontend applications without errors. Check basic agent communication placeholder."
    },
    {
      "id": 2,
      "title": "Implement User Authentication and RBAC",
      "description": "Implement secure user login/logout functionality and Role-Based Access Control (RBAC) to restrict access based on user roles.",
      "status": "pending",
      "dependencies": [
        1
      ],
      "priority": "high",
      "details": "Implement user registration (admin-only initially) and login using secure methods (e.g., JWT, password hashing). Define initial roles (Principal, Financial/Legal, Pedagogical Coordinator, Admin Assistant) based on personas (FR04). Implement middleware to protect API endpoints based on roles. Store user data securely (NFR01).",
      "testStrategy": "Unit tests for authentication logic. Integration tests for login/logout flow. Test endpoint access control for different defined roles. Verify password hashing and secure token handling."
    },
    {
      "id": 3,
      "title": "Implement LLM Interface Layer - Ollama Support",
      "description": "Develop the backend interface to connect with LLMs via Ollama, allowing local model usage.",
      "status": "pending",
      "dependencies": [
        1
      ],
      "priority": "high",
      "details": "Create a service/module within the backend to handle LLM interactions through mcp-agent. Implement logic to connect to a specified Ollama instance (server address, model name) (FR06c). Securely manage Ollama configuration details (e.g., via environment variables or a secure config store) (FR08).",
      "testStrategy": "Unit tests for the Ollama connection module. Integration test: Send a simple prompt to a running Ollama instance via the implemented interface and verify response. Test error handling for connection failures."
    },
    {
      "id": 4,
      "title": "Setup Secure Knowledge Base Core",
      "description": "Implement the basic infrastructure for the secure Knowledge Base (KB) to store school documents and structured data.",
      "status": "pending",
      "dependencies": [
        1
      ],
      "priority": "high",
      "details": "Set up a database (e.g., PostgreSQL) for structured data/metadata and configure secure file storage (e.g., S3, MinIO, or local encrypted storage) for documents (FR03). Implement basic CRUD operations for uploading, retrieving, and listing document metadata. Ensure data encryption at rest (NFR01).",
      "testStrategy": "Unit tests for KB service logic (CRUD operations). Test file upload and download functionality. Verify database schema creation. Check that stored files/data are encrypted as expected."
    },
    {
      "id": 5,
      "title": "Implement Administrative & Operational Agent - Core Features",
      "description": "Develop the Administrative Agent to handle core high-priority tasks like document template management, reminder generation, and semantic search.",
      "status": "pending",
      "dependencies": [
        2,
        3,
        4
      ],
      "priority": "high",
      "details": "Create an `AdministrativeAgent` class using mcp-agent. Implement functionality for managing document templates (FR17 - storing/retrieving templates). Implement logic to query the KB for dates and generate reminders (FR20). Implement basic semantic search over documents in the KB using embeddings generated via the LLM interface (FR21 - requires vector DB setup or basic search). Access control enforced by RBAC.",
      "testStrategy": "Unit tests for agent functions. Integration test: Upload a document template, then use the agent to retrieve it. Set a date in the KB, use the agent to generate a reminder. Upload documents, use the agent to perform semantic search and verify relevant results. Test role permissions."
    },
    {
      "id": 6,
      "title": "Implement Financial Agent - Core Features",
      "description": "Develop the Financial Agent to assist with basic financial data organization tasks.",
      "status": "pending",
      "dependencies": [
        2,
        3
      ],
      "priority": "high",
      "details": "Create a `FinancialAgent` class using mcp-agent. Implement LLM-assisted expense categorization based on text descriptions (FR25). Implement logic to generate basic cash flow summaries from provided data (FR26 - initial data via manual input/simple structure). Implement functionality to draft collection notices using LLM based on provided details (FR27). Ensure agent does not perform actual accounting (FR28). Access control enforced by RBAC.",
      "testStrategy": "Unit tests for agent functions. Integration test: Provide expense descriptions, verify categorization suggestions. Provide sample income/expense data, verify summary generation. Provide overdue details, verify draft notice generation. Test role permissions (e.g., Financial Director access)."
    },
    {
      "id": 7,
      "title": "Implement Communication & Relationship Agent - Core Features",
      "description": "Develop the Communication Agent to assist with drafting communications and managing FAQs.",
      "status": "pending",
      "dependencies": [
        2,
        3
      ],
      "priority": "high",
      "details": "Create a `CommunicationAgent` class using mcp-agent. Implement functionality to generate draft communications (notices, invitations) using the LLM based on user-provided key points (FR34). Implement functionality to suggest answers to FAQs based on KB content or predefined list (FR35). Access control enforced by RBAC.",
      "testStrategy": "Unit tests for agent functions. Integration test: Provide key points for a notice, verify the generated draft. Ask a common question, verify the suggested FAQ answer. Test role permissions."
    },
    {
      "id": 8,
      "title": "Develop LLM Configuration User Interface",
      "description": "Create the UI section for administrators to configure LLM connection settings.",
      "status": "pending",
      "dependencies": [
        3
      ],
      "priority": "medium",
      "details": "Build frontend components (React/Vue) for the LLM configuration page within the admin section (FR07). Allow selection of LLM provider (initially Ollama) and input fields for necessary details (e.g., Ollama server address, model name). Implement API calls to securely save and retrieve this configuration via the backend. Ensure only admin roles can access this page.",
      "testStrategy": "UI component tests. End-to-end test: Log in as admin, navigate to settings, configure Ollama details, save, reload, and verify settings persist. Test that non-admin roles cannot access the page."
    },
    {
      "id": 9,
      "title": "Implement Basic Data Import/Export",
      "description": "Enable basic data import from CSV/TXT files and export to CSV/DOCX formats.",
      "status": "pending",
      "dependencies": [
        2,
        4
      ],
      "priority": "medium",
      "details": "Implement backend endpoints for file upload (CSV, TXT) to import data (e.g., document metadata, reminder dates) into the KB (FR41). Implement backend endpoints to export data (e.g., generated reports, document lists) as CSV or basic DOCX files (FR42). Add basic validation checks during import (FR44). Ensure RBAC restricts who can perform import/export.",
      "testStrategy": "Unit tests for import/export logic (parsing, generation). Integration test: Prepare sample CSV, import it, verify data in KB. Export data from KB, verify format and content of generated CSV/DOCX file. Test permission checks for import/export actions."
    },
    {
      "id": 10,
      "title": "Implement Audit Logging and Basic Compliance",
      "description": "Set up activity logging for audit purposes and implement initial measures for LGPD compliance.",
      "status": "pending",
      "dependencies": [
        2
      ],
      "priority": "medium",
      "details": "Integrate a logging framework. Implement logging for critical actions: user login/logout, document upload/access, agent invocation, configuration changes (FR05). Ensure logs include user ID, timestamp, and action details. Encrypt log files if they contain sensitive data. Define placeholder logic/policy stubs for data retention based on LGPD (NFR01).",
      "testStrategy": "Verify logs are generated for specified actions. Check log format and content. Test log retrieval (if applicable). Review logging implementation against basic LGPD requirements (e.g., recording data access). Ensure logs are stored securely."
    }
  ],
  "metadata": {
    "projectName": "AI Assistant System for Kindergarten Management - Phase 1 MVP",
    "totalTasks": 10,
    "sourceFile": "scripts/prd.txt",
    "generatedAt": "2024-04-09"
  }
}